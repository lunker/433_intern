Tip15. tcp의 쓰기 작업을 이해하라

[어플리케이션 관점에서의 쓰기 작업]

- 쓰기 작업은 데이터를 송신 대기열로 복사하고, 대기열에 새로운 데이터가 있다는 것을 
tcp에 알리는 동작이라고 정리할 수 있다. 



[tcp 관점에서의 쓰기 작업 ]
- tcp가 도착한 데이터를 바로 보낼지, 그래야 한다면 얼마나 많이 보내야 할지 
결정하는데 사용하는 기준 ! 
- tcp 송신 정책의 가장 중요한 목표 : 가능한 모든 대역폭을 효과적으로 사용하는 것 

 * 이 목표를 위해서, mss크기로 전송하는 것을 선호한다. 
 + 상대측 버퍼 크기보다 크면 안된다.

- 하지만 고려해야 할 사항들이 남아 있다.
 1) 혼잡제어 
 # slow start, congestion avoidance : congestion window를 사용한다.
 - 어떤 순간이든 tcp가 전송하는 데이터의 최대량은 송신 윈도우와 혼잡 윈도우의 최소량이다.
 - 송신 윈도우: 상대측에 의해 강제된다. 송신 윈도우의 크기가 상대측의 버퍼 크기를 초과하지 못하도록 막는다.
 - 수신 윈도우: 우리측(sender)에 의해 제어된다. 네트워크 수용 능력을 넘어서서 데이터를 전송하지 못하도록 막아준다.
 
 
 2) Nagle 알고리즘 
 - tcp가 여러개의 작은 세그먼트로 네트워크를 혼잡하게 만들지 못하게 한다. 
 - 데이터를 한번에 전송한다. 
 ex) 
  - 데이터를 하나 보낸다.
  - ack를 받기 전이다.
  - 데이터 전송 요청을 또 받았다.
  - 이 데이터는 보내지 않고, ack가 올 때 까지 tcp는 전송을 대기한다.
 - nagle 알고리즘은 승인되지 못한 데이터가 있을 경우, 작은 세그먼트가 전송되지 않도록 요청한다.
 - 
 
- receiver는 전송하는 모든 세그먼트에 window update를 포함함으로써 현재 사용 가능한 
버퍼 공간의 양을 알린다. 
- 수신측의 sws회피는 버퍼 공간의 '충분한 증가'가 있지 않는 이상, 윈도우 업데이트를 하지 못하게 한다.
여기에서 충분한 양은 최대 크기의 세그먼트나, 최대 윈도우 크기의 반 이상이라고 정의!
 
 
 
 
 
 
=============================

- sws(Silly Window Syndrome) 회피.
 - sender : 데이터의 작은 양을 전송하는 것을 금지.
 - receiver : 윈도우 크기의 작은 증가를 알리지 않는다.
 
 
 
 
 
 
 
 
 
 