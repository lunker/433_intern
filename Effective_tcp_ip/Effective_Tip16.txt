Tip16. 올바른 순서의 TCP 릴리스 작업을 이해하라

- 클라이언트와 서버가 상대방에게 전송의 끝을 알리기 위한 자연스러운 방법으로 
자신들의 연결을 닫는다. 
- 즉, 사실상 EOF를 전송한다. 

[Shutdown 호출]
- 어떻게 연결 상태의 절반만 닫을 수 있는것일까? 
- shutdown 호출은 연결의 어느쪽을 닫아야 하는지를 명시하여 사용한다. 
- 이 함수는 posix와 winsock이 다르다. 


(내가 만든 그림 참조 )

 if) how == 0 
 [shutdown을 수행하는 측]
 * 연결 수신측이 닫힌다. 예를 들어 A가 shutdown(how==0)을 수행하면, 
 * A receive socket이 닫힌다. 이제 A는 더이상의 데이터를 수신할 수 없다. 
 * shutdown 이후에 추가적으로 read를 수행하면 eof를 반환한다. 
 * shutdown을 했어도 이미 receive socket buffer에 들어와 있는 데이터는 읽어들인다. 
 * shutdown이후에 새로운 데이터들이 도착하면, tcp는 ack를 보내지만, 어플리케이션이 더 이상 받을 수 없기 때문에 
 암묵적으로 이를 버린다. 
 
 [shutdown 반대 측]
 하지만,반대편인 B는 A로부터 새로운 데이터를 수신할 수 있다. (하나의 파이프개념)
 즉, 반대편B는 더이상 A에게 데이터를 전송할 수 없다 (A의 receive가 막혔으므로.)
 
 한편, winsock은 새로운 데이터가 도착하면 연결을 재설정한다. 
 
 
 if) how==1
 - shutdown을 수행하는 송신측 연결이 닫힌다.
 - 이후 소켓에 대해 쓰기 작업을 하려는 시도는 모두 오류처리.
 - 송신 버퍼 내의 데이터가 전송된 이후에 TCP는 상대측에 들어올 데이터가 더 이상 없다는 것을 말해주는 
 FIN을 전송한다! 
 - 이를 Half close라고 부른다.
 
 
 if) how==2
 - 연결의 양쪽 모두 닫힌다. 
 - shutdown(0), shutdown(1)을 모두 호출한 효과와 같다.
 - close()와는 다른 것이다 ! 
 
 
 
 - 소켓을 닫는것과 shutdown의 차이 ! 
  * shutdown(2)를 하여도 실제로 소켓을 닫지 않는다. 
  * '소켓을 닫는다'의 의미는 소켓과, 그것의 리소스를 반환한다는 것이다.
  * 하지만 shutdown은 단지 연결을 못쓰게끔 하는 것. 
  
 - ?????? shutdown의 호출은 소켓의 모든 소유자들이 그것에 쓰기를 할 수 없도록 한다.
 - close는 소켓의 참조 카운트가 0이 될때까지 상대측에 FIN을 보내지 않는다. 
 즉, 모든 프로세스가 소켓을 닫을 때까지 보내지 않는다.
 
 
 
 
 
 
[올바른 순서의 릴리스]

- 올바른 순서의 릴리스 목적은, '연결이 종료되기전에 양쪽이 상대측으로부터 모든 데이터를 받았는지를 확인하는 것'이다.
- 연결을 닫는 것은 상대측이 전송되는 데이터가 막힐 수도 있기 때문에, 어플리케이션이 연결을 닫았을 때, 이미 전달되지 않은 데이터는 모두 버려진다.
 
- shutdown의 진짜 흐름!!!!
 1) client가 shutdown 호출.
 2) 이 상태에서 데이터는 계속 읽힌다. (from 누구로부터?)
 3) tcpecho(서버)가 클라이언트로부터 eof를 보면, 
 이는 연결을 닫고 tcp가 send socket buffer에 있는 데이터와 함께 FIN이 전송되도록한다. 
 4) 클라이언트가 EOF를 
 
 

- 그림 3.4, 코드 내가 다시 만들기 ㅠㅠ 

 
 
 
 
 
 ========================================= 자료 추가 조사 =========================================
 
 
 
 상황1. 서버가 클라이언트에게 파일을 전송하고, 잘 받았다는 응답을 듣고싶다.
 -> 클라이언트는 파일을 언제까지 받을 지 알 수 없다.
 -> 서버에서 EOF를 전송하여 끝을 알려야 하는데, 이러기 위해서는 CLOSE()하게되면 입출력을 모두 끊어버리게 된다.
 !!!! 그래서, half-close를 이용한다.
 
 
 
 
 
 
 
 
 
 