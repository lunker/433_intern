


문자열 
-	@이라는 ‘축약 문자열’ 접두문자, 
-	$ 접두 문자를 사용하는 문자열 보간 
-	문자열 불변성이라는 특징이 있다. 
-	축약 문자열 접두문자를 사용하면 : 문자열 내의 공백을 무시하지 않고 문자로 인식한다. 리터럴 자체로 인식한다.
-	문자열 보간을 사용하기 위해서는 해당 문자열 앞에 $를 붙여준다.
Ex) console.writeline($”{name}”);

-	String.format();은 콘솔이 아닌 변수에 출력한다는 점 빼고는 console.write와 동일하게 작동한다.


[using과 using static]
-	정적메소드 호출은 항상 네임스페이스 접두어 + 형식이름을 수반한다.
-	Using static은 정적 메소드와 속성에 대해서만 작동한다 
-	Using static은 메소드 이름만으로 사용이 가능하게 해준다.
-	Using은 네임스페이스 접두어만 없애준다.

[문자열은 변경할 수 없다]
-	String의 내용을 수정할 수 없다.
-	문자열을 많이 수정해야 한다면 string보다는 stringBuilder를 사용 ! 
-	Stringbuilder는 새로운 문자열을 반환하지 않고, 데이터 자체를 수정한다.
[null과 void]
-	Null은 literal 문자열 형식으로도 사용된다.
-	Null은 변수에 아무것도 설정되지 않았음을 가리킨다. 
-	null값을 참조 형식에 할당하는 것과, 전혀 할당하지 않은 것은 완전히 다르다.
	Null을 할당한 변수는 설정된 것이지만, 아무것도 할당하지 않은 변수는 컴파일 에러를 뱉는다. 
-	String에 null값을 할당하는 것과 “”를 할당하는것은 다르다! Null은 해당 변수가 아무런 값을 가지고 있지 않음을 가리킨다. 하지만 “”은 빈 문자열이라는 값을 가리킨다.

[void형식]
- Void는 데이터 형식이 아니라, 반환되는 데이터가 없음을 가리킨다. 
 <void의 2가지 의미>
 1) 메소드에서 어떤 데이터도 반환하지 않는다 ! 
 2) 알 수 없는 형식의 저장소 위치에 대한 포인터.



 <암시적으로 형식화된 지역 변수>
 
 - var 키워드를 사용하여 type을 지정하지 않고서 변수를 사용한다.
 - 초기화를 반드시 해주어야 하고, 초기화 된 값의 형식을 그대로 사용한다.
 - CIL코드에서는 explicit type의 변수와 똑같이 생성된다. 
 - var키워드는 익명 형식을 할당할때 사용된다.
 ex) var parent = {name:"lee", age"26"};
 
'형식분류'

[값 형식]
- 변수를 복사하면, 값이 복사된다.
- 그래서 새로이 생성된 변수의 메모리 위치에 값이 복사된다. 
- 


[참조 형식] 



[null 허용 한정자]
- 값 형식에도 '값이 없음'을 의미하는 null이 필요하다.
- 이럴때 null 허용 한정자인 ?를 사용한다. 
- db작업 처리시에, 유용하게 쓰인다.

[데이터 형식간의 변환]
- 크기의 손실이나 예외가 발생하는 변환에는 명시적 캐스트를 사용해야 한다.
- 손실이 없을 때에는 암시적 변환(implicit conversion)을 사용한다.



[checked와 unchecked]
- 데이터를 보다 작은 형식에 담을 경우, 손실이 발생하는데 이때 어떻게 처리할 것인지 지시할 수 있다.
- checked block : 해당 블록 내에서 데이터 손실(overflow 등)이 일어나면 이상한 값을 할당시켜서 넘어가는게 아니라,예외를 발생시킨다.
- unchecked block : 예외를 발생시키지 않고 똥값이 들어가게된다.  


[TryParse()]
- 모든 숫자 기본 형식에서 제공된다.
- 문자열에서 숫자를 찾아낸다.
- 실패할 경우, 예외를 던지지 않고 false를 반환한다.