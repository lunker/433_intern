Chapter3. 연산자와 흐름 제어 



- char는 정수 계열 형식 
- 


[스레드로부터 안전한 증가와 감소]

- 그냥 ++, -- 를 하는 것은 안전하지 못하다.
- Threading.Interlocked에 속한 increment()와 decrement()를 사용하면 스레드로부터 안전하게 증가/감소된다.



[조건 연산자]

- expression ? 참 : 거짓 ; 

- 해당 expression이 참이면 '참'에 해당 되는 값을 반환한다.
- 참과 거짓의 값은 서로 implicit conversion 가능한 type이어야한다. 



[null 병합 연산자]
- exp1?? exp2
- exp1이 null값을 가지면, 다른 값인 exp2를 사용한다.

[null 조건 연산자]
- exp1?.xxxx();
- exp1이 null이 아니면 xxxx를 수행하고, null일 경우 예외를 발생시키지 않고 null을 반환하고 그냥 넘어간다.
- 



[c# 전처리 지시문]
- 컴파일 하면서 호출된다.
- 전처리기 명령은 c# 컴파일러에 대한 지시문으로 컴파일할 코드 부분을 지정하거나 해당 코드 내에서 특정 에러와 경고를 처리하는 방법을 지정한다.
<코드 제외와 포함> : #if, #elif, #else, #endif
- 플랫폼간의 차이를 다룰 때,
- debug, release 구분할 때 

<전처리 기호 정의> : #define, #undef
ex) #define HI 라고 하고, 
compiler에서는
csc.exe /define:HI asdf.cs 로 하면, 해당 HI라는 것을 정의하게 된다.
- 여러개의 정의를 사용하려면 세미콜론으로 구분한다. 
- 
